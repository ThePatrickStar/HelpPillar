import numpy
import os

from util import calibrate_time

CVE_FILE = 'cve_list.txt'
API_FILE = 'api_level_date.txt'
COMBINED_FILE = 'malware_family_date.txt'
FAMILY_FILE = 'malware_family_processed.txt'
RAW_FAMILY_FILE = 'malware_family.txt'
MALWARE_FILE = 'malware_date.txt'
OUTPUT_FILE = 'slope_per_family.txt'


with open(RAW_FAMILY_FILE) as f:
    raw_tuples = f.readlines()

if not os.path.isfile('./'+FAMILY_FILE):
    print 'the processed malware family file doesn\'t exist!\n processing...'
    output_file = open(FAMILY_FILE, 'w+')
    for i in raw_tuples:
        data_array = i.split('\t')
        sha = data_array[0]
        family = data_array[1].split()[0]
        if family.startswith('SINGLETON'):
            family = 'unknown'
        line = sha + ' ' + family + '\n'
        output_file.write(line)
    output_file.close()
    print 'finished processing'

if not os.path.isfile('./'+COMBINED_FILE):
    print 'the combined malware family/date file doesn\'t exist!\n combining...'
    output_file = open(COMBINED_FILE, 'w+')

    family_dict = {}
    date_dict = {}

    with open(FAMILY_FILE) as f:
        family_tuples = f.readlines()

    with open(MALWARE_FILE) as f:
        malware_tuples = f.readlines()

    for i in family_tuples:
        data_array = i.split()
        family_dict[data_array[0]] = data_array[1]

    for i in malware_tuples:
        data_array = i.split()
        date_dict[data_array[0]] = data_array[1]

    for i in family_dict:
        if date_dict.get(i) is not None:
            line = i + ' ' + date_dict[i] + ' ' + family_dict[i] + '\n'
            output_file.write(line)

    output_file.close()
    print 'finished combining'

event_time_s = set()
event_time = []
all_data = []

with open(CVE_FILE) as f:
    cve_tuples = f.readlines()

with open(API_FILE) as f:
    api_tuples = f.readlines()

print 'constructing event_time_s ...'
for i in cve_tuples:
    time = int(i.split()[1])
    if time < 20160500:
        event_time_s.add(time)

for i in api_tuples:
    event_time_s.add(int(i.split()[1]))

print 'constructing event_time ...'
for i in event_time_s:
    event_time.append(i)

print 'sorting event_time ...'
event_time.sort()

print 'constructing all_data_tuples ...'
with open(COMBINED_FILE) as f:
    all_data_tuples = f.readlines()

# for all_data: 0 is sha; 1 is date; 2 is family
print 'constructing all_data ...'
for i in all_data_tuples:
    all_data.append(i.split())

dict_slope = {}
print 'initializing dict_slope ...'
for i in all_data:
    if dict_slope.get(i[2]) is None:
        dict_slope[i[2]] = []
        for j in range(0, len(event_time)):
            dict_slope[i[2]].append(0)

print 'performing computation ...'
for idx, event in enumerate(event_time):
    dict_slopes = {}
    dict_count = {}
    dict_counts = {}
    dict_current_time = {}
    dict_day_interval = {}
    for data in all_data:
        # sha = data[0]
        date = int(data[1])
        family = data[2]
        if date < 20160500 and calibrate_time(event + 300) > date >= event:
            if dict_counts.get(family) is None:
                dict_counts[family] = []
            if dict_current_time.get(family) is None:
                dict_current_time[family] = date
            if dict_day_interval.get(family) is None:
                dict_day_interval[family] = []
            if dict_count.get(family) is None:
                dict_count[family] = 0

            if date == dict_current_time[family]:
                dict_count[family] += 1
            elif date > dict_current_time[family]:
                dict_day_interval[family].append(date - dict_current_time[family])
                dict_counts[family].append(dict_count[family])
                dict_count[family] = 1
                dict_current_time[family] = date
    for i in dict_counts:
        family_counts = dict_counts[i]
        dict_slopes[i] = []
        for j in range(0, len(family_counts)-1):
            diff = family_counts[j+1] - family_counts[j]
            slope = float(diff) / dict_day_interval[i][j]
            dict_slopes[i].append(slope)
        if len(dict_day_interval[i]) > 0 and len(dict_slopes[i]) > 0:
            slope_avg = numpy.mean(dict_slopes[i])
        else:
            slope_avg = 0
        dict_slope[i][idx] = slope_avg

print 'writing the output file ...'
output_file = open(OUTPUT_FILE, 'w+')

for i in dict_slope:
    line = i
    for j in dict_slope[i]:
        line += ' ' + str(j)
    line += '\n'
    output_file.write(line)

output_file.close()
